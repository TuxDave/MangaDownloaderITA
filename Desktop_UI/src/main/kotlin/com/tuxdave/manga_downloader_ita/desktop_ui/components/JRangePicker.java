/*
USAGE

JRangePicker r = new JRangePicker(1, 10);
JDialog d = new JDialog()
JOptionPane.showMessageDialog(<panel that calls this dialog>, r, "Select a Range", JOptionPane.INFORMATION_MESSAGE);//todo:sistemare questo
int[] i = r.getRange();
panel1

*/

package com.tuxdave.manga_downloader_ita.desktop_ui.components;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class JRangePicker extends JPanel {
    private JPanel panel1;
    private JSpinner minSpinner;
    private JSlider minSlider;
    private JSpinner maxSpinner;
    private JSlider maxSlider;
    private JLabel info1;
    private JButton okButton;

    private int max = 0;
    private int min = 0;
    private int[] range = {0, 0};

    //START AUTOGENERATED CODE

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        Font panel1Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, panel1.getFont());
        if (panel1Font != null) panel1.setFont(panel1Font);
        minSpinner = new JSpinner();
        Font minSpinnerFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, minSpinner.getFont());
        if (minSpinnerFont != null) minSpinner.setFont(minSpinnerFont);
        panel1.add(minSpinner, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        minSlider = new JSlider();
        Font minSliderFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, minSlider.getFont());
        if (minSliderFont != null) minSlider.setFont(minSliderFont);
        minSlider.setInverted(false);
        minSlider.setPaintLabels(true);
        minSlider.setPaintTicks(true);
        minSlider.setSnapToTicks(true);
        panel1.add(minSlider, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maxSpinner = new JSpinner();
        Font maxSpinnerFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, maxSpinner.getFont());
        if (maxSpinnerFont != null) maxSpinner.setFont(maxSpinnerFont);
        panel1.add(maxSpinner, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maxSlider = new JSlider();
        Font maxSliderFont = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, maxSlider.getFont());
        if (maxSliderFont != null) maxSlider.setFont(maxSliderFont);
        maxSlider.setInverted(false);
        maxSlider.setPaintLabels(true);
        maxSlider.setPaintTicks(true);
        maxSlider.setSnapToTicks(true);
        maxSlider.setValueIsAdjusting(false);
        panel1.add(maxSlider, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 12, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Da:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 12, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Fino a:");
        panel1.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        info1 = new JLabel();
        Font info1Font = this.$$$getFont$$$("Ubuntu", Font.BOLD, 14, info1.getFont());
        if (info1Font != null) info1.setFont(info1Font);
        info1.setHorizontalAlignment(0);
        info1.setHorizontalTextPosition(0);
        info1.setText("Range: ");
        panel1.add(info1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    //END AUTOGENERATED CODE

    public JRangePicker(int _min, int _max) {
        super();
        if (_min < _max) {
            max = _max;
            min = _min;
        } else {
            throw new IllegalArgumentException("ERROR: The first parameter must be lower then the second!");
        }
        //Setup the component with the correct values
        minSpinner.setValue(min);
        minSlider.setMaximum(max);
        minSlider.setMinimum(min);
        minSlider.setValue(min);
        maxSpinner.setValue(max);
        maxSlider.setMaximum(max);
        maxSlider.setMinimum(min);
        maxSlider.setValue(max);
        update();
        {//applyimng the listeners
            JRangePickerListener l = new JRangePickerListener();
            minSpinner.addChangeListener(l);
            minSlider.addChangeListener(l);
            maxSpinner.addChangeListener(l);
            maxSlider.addChangeListener(l);
        }
    }

    {//setup panel
        add(panel1);
    }

    private void update() {
        int min = (int) minSpinner.getValue();
        int max = (int) maxSpinner.getValue();
        range = new int[]{(int) minSpinner.getValue(), (int) maxSpinner.getValue()};
        info1.setText("Range: " + min + "-" + max + " (" + (max - min + 1) + (max - min + 1 == 1 ? " item" : " items") + " selected)");
    }

    public int[] getRange() {
        return range;
    }

    private class JRangePickerListener implements ChangeListener {

        @Override
        public void stateChanged(ChangeEvent changeEvent) {
            if (changeEvent.getSource() == minSpinner || changeEvent.getSource() == maxSpinner) {
                JSpinner sp = (JSpinner) (changeEvent.getSource());
                if ((int) sp.getValue() < min) {
                    sp.setValue(min);
                } else if ((int) sp.getValue() > max) {
                    sp.setValue(max);
                }
                if (changeEvent.getSource() == minSpinner) {
                    minSlider.setValue((int) minSpinner.getValue()); //updating minSlider
                    //check if the minSpinner is lower then maxSpinner and correct if false
                    if ((int) minSpinner.getValue() > (int) maxSpinner.getValue()) {
                        maxSpinner.setValue((int) minSpinner.getValue());
                    }
                } else {
                    maxSlider.setValue((int) maxSpinner.getValue()); //updating maxSlider
                    //like upstairs
                    if ((int) maxSpinner.getValue() < (int) minSpinner.getValue()) {
                        minSpinner.setValue((int) maxSpinner.getValue());
                    }
                }
                update();
            }
            if (changeEvent.getSource() instanceof JSlider) {
                if (changeEvent.getSource() == minSlider) {
                    minSpinner.setValue((int) minSlider.getValue());
                } else {
                    maxSpinner.setValue((int) maxSlider.getValue());
                }
            }
        }
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        for (Component j : panel1.getComponents()) {
            j.setEnabled(enabled);
        }
    }
}
